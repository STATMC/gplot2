df['date'] = None

# 'time' sütunundaki son AM veya PM değiştiğinde, dates listesinden yeni bir tarih alınacak
current_date_index = 0
current_am_pm = None

for i in range(len(df)):
    time_value = df.loc[i, 'time']
    if 'AM' in time_value or 'PM' in time_value:
        am_pm = 'AM' if 'AM' in time_value else 'PM'
        if current_am_pm is None:
            current_am_pm = am_pm  # İlk değeri atama
        elif current_am_pm != am_pm:
            current_am_pm = am_pm
            current_date_index += 1  # Yeni tarih bilgisine geçiş
        
    df.loc[i, 'date'] = dates[current_date_index]

print(df)




.....................................


df['date'] = None

# 'time' sütunundaki son AM veya PM değiştiğinde, dates listesinden yeni bir tarih alınacak
current_date_index = 0
current_am_pm = None

for i in range(len(df)):
    time_value = df.loc[i, 'time']
    # time_value'yi string olarak ele al ve boş veya NaN değerleri kontrol et
    if pd.notna(time_value):
        time_value = str(time_value)
        if 'AM' in time_value or 'PM' in time_value:
            am_pm = 'AM' if 'AM' in time_value else 'PM'
            if current_am_pm is None:
                current_am_pm = am_pm  # İlk değeri atama
            elif current_am_pm != am_pm:
                current_am_pm = am_pm
                # dates listesinin sınırlarını kontrol et
                if current_date_index < len(dates) - 1:
                    current_date_index += 1  # Yeni tarih bilgisine geçiş
                else:
                    break  # Eğer tarih kalmadıysa döngüden çık

            df.loc[i, 'date'] = dates[current_date_index]
    else:
        df.loc[i, 'date'] = 'Unknown'  # veya df.drop(i) ile satırı sil

print(df)











